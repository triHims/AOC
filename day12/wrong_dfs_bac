import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

public class wrong rrrr{

}
import java.io.File;
    import java.io.FileNotFoundException;
    import java.util.ArrayList;
    import java.util.Queue;
    import java.util.LinkedList;
    import java.util.PriorityQueue;
    import java.util.Scanner;

public class SolutionDay12 {

  static int answer;
  static ArrayList<ArrayList<Character>> als;
  static int visit[][];
  static PosPair end;
  public static void main(String[] args) {

    Scanner sc;

    if (args.length > 0) {
      try {
        sc = new Scanner(new File(args[0]));
      } catch (FileNotFoundException e) {
        System.out.printf("The file with name %s not able to load\nExiting\n", args[0]);
        return;
      }
    } else {
      sc = new Scanner(System.in);
    }

    als = new ArrayList<>();
    PosPair start = new PosPair(0, 0);
    end = new PosPair(0, 0);

    while (sc.hasNextLine()) {
      String line = sc.nextLine().trim();

      var locl = new ArrayList<Character>();
      for (int i = 0; i < line.length(); i++) {
        char c = line.charAt(i);
        if (c == 'S') {
          start = new PosPair(als.size(), locl.size());
          locl.add('a');
        } else if (c == 'E') {
          end = new PosPair(als.size(), locl.size());
          locl.add('z');
        } else {
          locl.add(c);
        }
      }

      als.add(locl);

    }

    visit = new int[als.size()][als.get(0).size()];
    answer = Integer.MAX_VALUE;
    dopesDfs(start.x,start.y,0);


    System.out.println(answer);

  }

  static void dopesDfs(int x,int y,int step) {



    if (visit[x][y] == 1) {
      return;
    }
    if (end.x == x && end.y == y) {
      answer = Math.min(step, answer);
      return;
    }

    if (step >= answer) {
      return;
    }

    var charAtLocation = als.get(x).get(y).charValue();
    visit[x][y] = 1;
    // up
    if (x - 1 >= 0 && als.get(x - 1).get(y).charValue() <= (charAtLocation + 1)) {
      dopesDfs(x-1,y,step+1);
    }
    // down
    if (x + 1 < als.size()
        && als.get(x + 1).get(y).charValue() <= (charAtLocation + 1)) {
      dopesDfs(x+1,y,step+1);
    }
    // left
    if (y - 1 >= 0 && als.get(x).get(y - 1).charValue() <= (charAtLocation + 1)) {
      dopesDfs(x,y-1,step+1);
    }
    // right
    if (y + 1 < als.get(0).size()
        && als.get(x).get(y + 1).charValue() <= (charAtLocation + 1)) {
      dopesDfs(x,y+1,step+1);
    }
    visit[x][y] = 0;

  }
}

class PairStore {
  PosPair loc;
  int step;

  PairStore(PosPair pair, int step) {
    this.loc = pair;
    this.step = step;
  }
}

class PosPair {
  int x;
  int y;

  PosPair(int x, int y) {
    this.x = x;
    this.y = y;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }

    if (!(obj instanceof PosPair)) {
      return false;
    }

    PosPair c = (PosPair) obj;

    return this.x == c.x && this.y == c.y;
  }

  @Override
  public int hashCode() {
    int p = 999;

    return p * x + y;
  }

}
